security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        api_key_user_provider:
            entity:
                class: App\Entity\User
                property: apiToken
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: api_key_user_provider
            guard:
                authenticators:
                    - App\Security\TokenAuthenticator
            logout:
                path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/listePersonne, roles: ROLE_ADMIN }
         - { path: ^/insertPersonne, roles: ROLE_ADMIN }
         - { path: ^/deletePersonne, roles: ROLE_ADMIN }
         - { path: ^/listeMarque, roles: ROLE_ADMIN }
         - { path: ^/insertMarque, roles: ROLE_ADMIN }
         - { path: ^/deleteMarque, roles: ROLE_ADMIN }
         - { path: ^/listeVille, roles: ROLE_ADMIN }
         - { path: ^/insertVille, roles: ROLE_ADMIN }
         - { path: ^/deleteVille, roles: ROLE_ADMIN }
         - { path: ^/listeVoiture, roles: ROLE_ADMIN }
         - { path: ^/insertVoiture, roles: ROLE_ADMIN }
         - { path: ^/deleteVoiture, roles: ROLE_ADMIN }
         - { path: ^/listeUser, roles: ROLE_ADMIN }
         - { path: ^/insertUser, roles: ROLE_ADMIN }
         - { path: ^/deleteUser, roles: ROLE_ADMIN }
         - { path: ^/listeTrajet, roles: ROLE_ADMIN }
         - { path: ^/insertTrajet, roles: ROLE_ADMIN }
         - { path: ^/deleteTrajet, roles: ROLE_ADMIN }
         - { path: ^/listeInscription, roles: ROLE_ADMIN }
         - { path: ^/insertInscription, roles: ROLE_ADMIN }
         - { path: ^/deleteInscription, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
